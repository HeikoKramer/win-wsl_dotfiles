# Helper function definitions (see templates in home/ and readonly_Documents/)
# Each entry: name, cat (category), desc, and optional linux/win bodies.
# Bodies should be multi-line strings containing the function/scriptblock contents.

- name: allg
  cat: GIT
  desc: Git add/status/commit/push helper
  linux: |-
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      echo "Not inside a Git repository."
      return 1
    fi

    git add -A
    git status

    local message="$1"
    if [ -z "$message" ]; then
      read -r -p "Enter commit message: " message
    fi

    if [ -z "$message" ]; then
      echo "Aborted: empty commit message."
      return 1
    fi

    git commit -m "$message" || return 1

    local branch
    branch="$(git rev-parse --abbrev-ref HEAD)"
    if git rev-parse --symbolic-full-name --abbrev-ref '@{u}' >/dev/null 2>&1; then
      git push
    else
      git push -u origin "$branch"
    fi
  win: |-
    param(
        [string]$Message
    )

    if (-not (Test-Path ".git")) {
        Write-Host "Not inside a Git repository."
        return
    }

    git add -A
    git status

    if (-not $Message) {
        $Message = Read-Host "Enter commit message"
    }

    if ([string]::IsNullOrWhiteSpace($Message)) {
        Write-Host "Aborted: empty commit message."
        return
    }

    git commit -m "$Message"

    $branch = git rev-parse --abbrev-ref HEAD

    $null = git rev-parse --symbolic-full-name --abbrev-ref '@{u}' 2>$null
    if ($LASTEXITCODE -ne 0) {
        git push -u origin $branch
    } else {
        git push
    }

- name: gall
  cat: GIT
  desc: Git fetch + fast-forward merge helper
  linux: |-
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
      echo "Not inside a Git repository." >&2
      return 1
    fi

    local remote="${1:-origin}"
    local branch="$2"

    if [ -z "$branch" ]; then
      branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
      if [ -z "$branch" ] || [ "$branch" = "HEAD" ]; then
        echo "Unable to determine the current branch. Specify a branch explicitly." >&2
        return 1
      fi
    fi

    if ! git fetch "$remote" "$branch"; then
      return 1
    fi

    if ! git merge --ff-only "$remote/$branch"; then
      echo "Fast-forward merge failed for $remote/$branch. Resolve conflicts and try again." >&2
      return 1
    fi
  win: |-
    param(
        [string]$Remote = 'origin',
        [string]$Branch
    )

    $insideRepo = git rev-parse --is-inside-work-tree 2>$null
    if ($LASTEXITCODE -ne 0 -or -not $insideRepo) {
        Write-Error "Not inside a Git repository."
        return
    }

    if (-not $Branch) {
        $Branch = git rev-parse --abbrev-ref HEAD 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Unable to determine the current branch. Specify -Branch."
            return
        }

        $Branch = $Branch.Trim()
        if ([string]::IsNullOrWhiteSpace($Branch) -or $Branch -eq 'HEAD') {
            Write-Error "Unable to determine the current branch. Specify -Branch."
            return
        }
    }

    git fetch $Remote $Branch
    if ($LASTEXITCODE -ne 0) {
        return
    }

    git merge --ff-only "$Remote/$Branch"
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Fast-forward merge failed for $Remote/$Branch. Resolve conflicts and try again."
        return
    }

- name: dot
  cat: DIRS
  desc: open dotfiles repo
  linux: |-
    if [ -z "$DOTFILES" ]; then
      echo "DOTFILES environment variable is not set." >&2
      return 1
    fi

    (
      cd "$DOTFILES" || return 1

      case "$1" in
        -push)
          shift
          allg "$@"
          ;;
        -pull)
          shift
          gall "$@"
          ;;
        *)
          ls "$@"
          ;;
      esac
    )
  win: |-
    param(
        [string]$Mode,
        [Parameter(ValueFromRemainingArguments = $true)]
        [string[]]$Rest
    )

    if (-not $env:DOTFILES) {
        Write-Error "DOTFILES environment variable is not set."
        return
    }

    Push-Location
    try {
        Set-Location $env:DOTFILES

        switch ($Mode) {
            '-push' {
                if ($Rest -and $Rest.Count -gt 0) {
                    $message = [string]::Join(' ', $Rest)
                    allg $message
                }
                else {
                    allg
                }
            }
            '-pull' {
                $remote = $null
                $branch = $null
                if ($Rest.Count -gt 0) { $remote = $Rest[0] }
                if ($Rest.Count -gt 1) { $branch = $Rest[1] }

                if ($remote -and $branch) {
                    gall $remote $branch
                }
                elseif ($remote) {
                    gall $remote
                }
                else {
                    gall
                }
            }
            Default {
                $listArgs = @()
                if ($Mode) { $listArgs += $Mode }
                if ($Rest) { $listArgs += $Rest }

                if ($listArgs.Count -gt 0) {
                    Get-ChildItem @listArgs
                }
                else {
                    Get-ChildItem
                }
            }
        }
    }
    finally {
        Pop-Location
    }
