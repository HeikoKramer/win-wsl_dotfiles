# Generated by chezmoi from common/shortcuts.yml and common/functions.yml

$ErrorActionPreference = "Stop"
Set-Location $HOME
if (-not $env:DOTFILES) { $env:DOTFILES = "E:\Configs\dotfiles" }

if (-not $env:DOTFILES_PROFILE_AUTOUPDATED) {
  $env:DOTFILES_PROFILE_AUTOUPDATED = '1'
  if (Get-Command chezmoi -ErrorAction SilentlyContinue) {
    try {
      $updateOutput = chezmoi update 2>&1
      if ($LASTEXITCODE -eq 0) {
        if ($updateOutput) { Write-Verbose (@($updateOutput) -join [Environment]::NewLine) }
        . $PROFILE
        return
      } else {
        Write-Warning "chezmoi update failed:`n$updateOutput"
      }
    } catch {
      Write-Warning "chezmoi update failed: $_"
    }
  }
}

# chezmoi environment-variable
try { $env:CHEZMOI_SOURCE_DIR = (chezmoi source-path) } catch {}

# Set default editors
function Edit-File {
  param([Parameter(Mandatory)] [string]$Path)
  $editor = $env:EDITOR
  if (-not $editor) {
    if (Get-Command code -ErrorAction SilentlyContinue)      { $editor = 'code' }
    elseif (Get-Command 'notepad++' -ErrorAction SilentlyContinue) { $editor = 'notepad++' }
    else                                                     { $editor = 'notepad' }
  }
  & $editor $Path
}

# --- Load shortcuts from YAML ---




$Shortcuts = @(

    [pscustomobject]@{
        name = "short"
        cat  = "CONFIG"
        desc = "shortcuts.yml edit"
        cmd  ='${EDITOR:-vim} "$DOTFILES/common/shortcuts.yml"'
    };

    [pscustomobject]@{
        name = "pro"
        cat  = "CONFIG"
        desc = "PS profile (tmpl) edit"
        cmd  ='${EDITOR:-vim} "$DOTFILES/readonly_Documents/PowerShell/Microsoft.PowerShell_profile.ps1.tmpl"'
    };

    [pscustomobject]@{
        name = "fresh"
        cat  = "CONFIG"
        desc = "Profile reload"
        cmd  ='source ~/.bashrc'
    };

    [pscustomobject]@{
        name = "chez"
        cat  = "CONFIG"
        desc = "chezmoi apply"
        cmd  ='chezmoi apply -v'
    };

    [pscustomobject]@{
        name = "ts"
        cat  = "CONFIG"
        desc = "Terminal Settings"
        cmd  =''
    };

    [pscustomobject]@{
        name = "gitconf"
        cat  = "CONFIG"
        desc = ".gitconfig edit"
        cmd  ='${EDITOR:-vim} "$HOME/.gitconfig"'
    };

    [pscustomobject]@{
        name = "sshdir"
        cat  = "DIRS"
        desc = "SSH Keys"
        cmd  ='cd "$HOME/.ssh"; ls -la'
    };

    [pscustomobject]@{
        name = "down"
        cat  = "DIRS"
        desc = "Open Downloads"
        cmd  ='cd "$HOME/Downloads"; ls -la'
    };

    [pscustomobject]@{
        name = "docs"
        cat  = "DIRS"
        desc = "Open Documents"
        cmd  ='cd "$HOME/Documents"; ls -la'
    };

    [pscustomobject]@{
        name = "desk"
        cat  = "DIRS"
        desc = "Open Desktop"
        cmd  ='cd "$HOME/Desktop"; ls -la'
    };

    [pscustomobject]@{
        name = "projects"
        cat  = "DIRS"
        desc = "Projects E:"
        cmd  ='cd "/mnt/e/Projects"; ls -la'
    };

    [pscustomobject]@{
        name = "dot"
        cat  = "DIRS"
        desc = "open dotfiles repo"
        cmd  ='[function]'
    };

    [pscustomobject]@{
        name = "gs"
        cat  = "COMMANDS"
        desc = "git status"
        cmd  ='git status'
    };

)

$Functions = @(

    [pscustomobject]@{
        name = "allg"
        cat  = "GIT"
        desc = "Git add/status/commit/push helper"
    };

    [pscustomobject]@{
        name = "gall"
        cat  = "GIT"
        desc = "Git fetch + fast-forward merge helper"
    };


)

# --- Attach function helpers from YAML ---

$Shortcuts += [pscustomobject]@{
    name = "allg"
    cat  = "GIT"
    desc = "Git add/status/commit/push helper"
    cmd  = '[function]'
}
Set-Item -Path "function:allg" -Value ([scriptblock]::Create(@'

param(
    [string]$Message
)

if (-not (Test-Path ".git")) {
    Write-Host "Not inside a Git repository."
    return
}

git add -A
git status

if (-not $Message) {
    $Message = Read-Host "Enter commit message"
}

if ([string]::IsNullOrWhiteSpace($Message)) {
    Write-Host "Aborted: empty commit message."
    return
}

git commit -m "$Message"

$branch = git rev-parse --abbrev-ref HEAD

$null = git rev-parse --symbolic-full-name --abbrev-ref '@{u}' 2>$null
if ($LASTEXITCODE -ne 0) {
    git push -u origin $branch
} else {
    git push
}
'@)) -Force

$Shortcuts += [pscustomobject]@{
    name = "gall"
    cat  = "GIT"
    desc = "Git fetch + fast-forward merge helper"
    cmd  = '[function]'
}
Set-Item -Path "function:gall" -Value ([scriptblock]::Create(@'

param(
    [string]$Remote = 'origin',
    [string]$Branch
)

$insideRepo = git rev-parse --is-inside-work-tree 2>$null
if ($LASTEXITCODE -ne 0 -or -not $insideRepo) {
    Write-Error "Not inside a Git repository."
    return
}

if (-not $Branch) {
    $Branch = git rev-parse --abbrev-ref HEAD 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Unable to determine the current branch. Specify -Branch."
        return
    }

    $Branch = $Branch.Trim()
    if ([string]::IsNullOrWhiteSpace($Branch) -or $Branch -eq 'HEAD') {
        Write-Error "Unable to determine the current branch. Specify -Branch."
        return
    }
}

git fetch $Remote $Branch
if ($LASTEXITCODE -ne 0) {
    return
}

git merge --ff-only "$Remote/$Branch"
if ($LASTEXITCODE -ne 0) {
    Write-Error "Fast-forward merge failed for $Remote/$Branch. Resolve conflicts and try again."
    return
}
'@)) -Force

Set-Item -Path "function:dot" -Value ([scriptblock]::Create(@'

param(
    [string]$Mode,
    [Parameter(ValueFromRemainingArguments = $true)]
    [string[]]$Rest
)

if (-not $env:DOTFILES) {
    Write-Error "DOTFILES environment variable is not set."
    return
}

if (-not (Test-Path -Path $env:DOTFILES)) {
    Write-Error "DOTFILES path '$($env:DOTFILES)' does not exist."
    return
}

Set-Location -Path $env:DOTFILES

if (-not $Rest) {
    $Rest = @()
}

switch ($Mode) {
    '-push' {
        if ($Rest -and $Rest.Count -gt 0) {
            $message = [string]::Join(' ', $Rest)
            allg $message
        }
        else {
            allg
        }

        return # prevent falling through to default listing behaviour
    }
    '-pull' {
        $remote = $null
        $branch = $null
        if ($Rest.Count -gt 0) { $remote = $Rest[0] }
        if ($Rest.Count -gt 1) { $branch = $Rest[1] }

        if ($remote -and $branch) {
            gall $remote $branch
        }
        elseif ($remote) {
            gall $remote
        }
        else {
            gall
        }

        return # prevent falling through to default listing behaviour
    }
    Default {
        $listArgs = @()
        if ($Mode) { $listArgs += $Mode }
        if ($Rest.Count -gt 0) { $listArgs += $Rest }

        if ($listArgs.Count -gt 0) {
            Get-ChildItem @listArgs
        }
        else {
            Get-ChildItem
        }
    }
}
'@)) -Force


# --- Register shortcut functions ---
foreach ($s in $Shortcuts) {
    if ([string]::IsNullOrWhiteSpace($s.cmd)) { continue }
    if ($s.cmd -eq '[function]') { continue }
    Set-Item -Path "function:$($s.name)" -Value ([scriptblock]::Create($s.cmd)) -Force
}

# --- Overview: shortcuts [CATEGORY] ---
function shortcuts {
    param([string]$Category)
    $Shortcuts
      | Where-Object { $_.cmd -and (!$Category -or $_.cat -eq $Category) }
      | Sort-Object cat,name
      | Select-Object name,cat,desc,cmd
      | Format-Table -AutoSize
}

function functions {
    param([string]$Category)
    $Functions
      | Where-Object { !$Category -or $_.cat -eq $Category }
      | Sort-Object cat,name
      | Select-Object name,cat,desc
      | Format-Table -AutoSize
}

try { Start-Service ssh-agent -ErrorAction SilentlyContinue | Out-Null } catch {}

function Show-DotfilesVersion {
  $version = 'unknown'
  $branch = $null

  if ($env:DOTFILES -and (Test-Path (Join-Path $env:DOTFILES '.git'))) {
    if (Get-Command git -ErrorAction SilentlyContinue) {
      try {
        $version = git -C $env:DOTFILES rev-parse --short HEAD 2>$null
        $branch  = git -C $env:DOTFILES rev-parse --abbrev-ref HEAD 2>$null
      } catch {}
    }
  }

  if ($branch -and $branch -ne 'HEAD') {
    $version = "$branch@$version"
  }

  Write-Host "Dotfiles version (Windows): $version"
}

Show-DotfilesVersion
Write-Host "Profile loaded. 'shortcuts' lists everything, 'functions' shows helpers."
